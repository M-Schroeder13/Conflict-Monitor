[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "conflict-zone-monitor"
version = "0.1.0"
description = "OSINT-based conflict zone monitoring and analysis platform"
authors = [
    {name = "MattSchroeder", email = "daboss123666@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["osint", "geoint", "intelligence", "data-engineering", "conflict-monitoring"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "dlt[duckdb]>=0.4.12",
    "dagster>=1.5.12",
    "pandas>=2.1.4",
    "streamlit>=1.29.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "black>=23.12.1",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
]

[project.urls]
Homepage = "https://github.com/yourusername/conflict-zone-monitor"
Documentation = "https://github.com/yourusername/conflict-zone-monitor/docs"
Repository = "https://github.com/yourusername/conflict-zone-monitor"
Issues = "https://github.com/yourusername/conflict-zone-monitor/issues"

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=dlt_pipelines --cov=analysis --cov-report=html"
testpaths = ["tests"]
pythonpath = ["."]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.coverage.run]
omit = ["tests/*", "*/site-packages/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
